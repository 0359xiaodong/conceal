From 0e837da1fd1c021ef044a389acc2f4c2f668f30f Mon Sep 17 00:00:00 2001
[PATCH] Make openssl smaller [Part 2]

Summary:
Make modifications to break circular deps
in openssl to make the library much smaller.

After modifications the library sizes are:
armeabi-v7: 85K
armeabi : 93K
x86 : 169K

---
 Crypto-config.mk        | 282 +--------------------
 build-config-32.mk      |   9 +
 crypto/asn1/ameth_lib.c |   8 +
 crypto/evp/e_aes.c      |  70 ++++-
 crypto/evp/evp_lib.c    |   2 +
 crypto/evp/p_lib.c      |   4 +
 crypto/evp/pmeth_lib.c  |   6 +
 crypto/mem_dbg.c        |   2 +
 .../third-party/openssl/crypto/objects/obj_dat.c   |  12 +
 9 files changed, 111 insertions(+), 284 deletions(-)

diff --git a/Crypto-config.mk b/Crypto-config.mk
index 36b4b69..1ec02cf 100644
--- a/Crypto-config.mk
+++ b/Crypto-config.mk
@@ -30,329 +30,49 @@ common_c_flags := \
   -DNO_WINDOWS_BRAINDEATH \
 
 common_src_files := \
-  crypto/aes/aes_cbc.c \
-  crypto/aes/aes_cfb.c \
   crypto/aes/aes_core.c \
+  crypto/aes/aes_cbc.c \
   crypto/aes/aes_ctr.c \
-  crypto/aes/aes_ecb.c \
   crypto/aes/aes_misc.c \
-  crypto/aes/aes_ofb.c \
   crypto/aes/aes_wrap.c \
-  crypto/asn1/a_bitstr.c \
-  crypto/asn1/a_bool.c \
-  crypto/asn1/a_bytes.c \
-  crypto/asn1/a_d2i_fp.c \
-  crypto/asn1/a_digest.c \
-  crypto/asn1/a_dup.c \
-  crypto/asn1/a_enum.c \
-  crypto/asn1/a_gentm.c \
-  crypto/asn1/a_i2d_fp.c \
-  crypto/asn1/a_int.c \
-  crypto/asn1/a_mbstr.c \
-  crypto/asn1/a_object.c \
-  crypto/asn1/a_octet.c \
-  crypto/asn1/a_print.c \
-  crypto/asn1/a_set.c \
-  crypto/asn1/a_sign.c \
-  crypto/asn1/a_strex.c \
-  crypto/asn1/a_strnid.c \
-  crypto/asn1/a_time.c \
-  crypto/asn1/a_type.c \
-  crypto/asn1/a_utctm.c \
-  crypto/asn1/a_utf8.c \
-  crypto/asn1/a_verify.c \
   crypto/asn1/ameth_lib.c \
-  crypto/asn1/asn1_gen.c \
-  crypto/asn1/asn1_lib.c \
-  crypto/asn1/asn1_par.c \
-  crypto/asn1/asn_mime.c \
-  crypto/asn1/asn_moid.c \
-  crypto/asn1/asn_pack.c \
-  crypto/asn1/bio_asn1.c \
-  crypto/asn1/bio_ndef.c \
-  crypto/asn1/d2i_pr.c \
-  crypto/asn1/d2i_pu.c \
-  crypto/asn1/evp_asn1.c \
-  crypto/asn1/f_enum.c \
-  crypto/asn1/f_int.c \
-  crypto/asn1/f_string.c \
-  crypto/asn1/i2d_pr.c \
-  crypto/asn1/i2d_pu.c \
-  crypto/asn1/n_pkey.c \
-  crypto/asn1/nsseq.c \
-  crypto/asn1/p5_pbe.c \
-  crypto/asn1/p5_pbev2.c \
-  crypto/asn1/p8_pkey.c \
-  crypto/asn1/t_bitst.c \
-  crypto/asn1/t_crl.c \
-  crypto/asn1/t_pkey.c \
-  crypto/asn1/t_req.c \
-  crypto/asn1/t_spki.c \
-  crypto/asn1/t_x509.c \
-  crypto/asn1/t_x509a.c \
-  crypto/asn1/tasn_dec.c \
-  crypto/asn1/tasn_enc.c \
-  crypto/asn1/tasn_fre.c \
-  crypto/asn1/tasn_new.c \
-  crypto/asn1/tasn_prn.c \
-  crypto/asn1/tasn_typ.c \
-  crypto/asn1/tasn_utl.c \
-  crypto/asn1/x_algor.c \
-  crypto/asn1/x_attrib.c \
-  crypto/asn1/x_bignum.c \
-  crypto/asn1/x_crl.c \
-  crypto/asn1/x_exten.c \
-  crypto/asn1/x_info.c \
-  crypto/asn1/x_long.c \
-  crypto/asn1/x_name.c \
-  crypto/asn1/x_nx509.c \
-  crypto/asn1/x_pkey.c \
-  crypto/asn1/x_pubkey.c \
-  crypto/asn1/x_req.c \
-  crypto/asn1/x_sig.c \
-  crypto/asn1/x_spki.c \
-  crypto/asn1/x_val.c \
-  crypto/asn1/x_x509.c \
-  crypto/asn1/x_x509a.c \
-  crypto/bio/b_dump.c \
   crypto/bio/b_print.c \
-  crypto/bio/bf_buff.c \
-  crypto/bio/bf_nbio.c \
-  crypto/bio/bf_null.c \
-  crypto/bio/bio_cb.c \
   crypto/bio/bio_lib.c \
-  crypto/bio/bss_acpt.c \
-  crypto/bio/bss_bio.c \
-  crypto/bio/bss_conn.c \
-  crypto/bio/bss_dgram.c \
-  crypto/bio/bss_fd.c \
-  crypto/bio/bss_file.c \
-  crypto/bio/bss_log.c \
-  crypto/bio/bss_mem.c \
-  crypto/bio/bss_null.c \
-  crypto/bn/bn_add.c \
-  crypto/bn/bn_asm.c \
-  crypto/bn/bn_blind.c \
-  crypto/bn/bn_const.c \
-  crypto/bn/bn_ctx.c \
-  crypto/bn/bn_div.c \
-  crypto/bn/bn_exp.c \
-  crypto/bn/bn_exp2.c \
-  crypto/bn/bn_gcd.c \
-  crypto/bn/bn_gf2m.c \
-  crypto/bn/bn_kron.c \
-  crypto/bn/bn_lib.c \
-  crypto/bn/bn_mod.c \
-  crypto/bn/bn_mont.c \
-  crypto/bn/bn_mpi.c \
-  crypto/bn/bn_mul.c \
-  crypto/bn/bn_nist.c \
-  crypto/bn/bn_prime.c \
-  crypto/bn/bn_print.c \
-  crypto/bn/bn_rand.c \
-  crypto/bn/bn_recp.c \
-  crypto/bn/bn_shift.c \
-  crypto/bn/bn_sqr.c \
-  crypto/bn/bn_sqrt.c \
-  crypto/bn/bn_word.c \
   crypto/buffer/buf_str.c \
-  crypto/buffer/buffer.c \
-  crypto/cmac/cm_ameth.c \
-  crypto/cmac/cm_pmeth.c \
-  crypto/cmac/cmac.c \
-  crypto/conf/conf_api.c \
-  crypto/conf/conf_def.c \
-  crypto/conf/conf_lib.c \
-  crypto/conf/conf_mall.c \
-  crypto/conf/conf_mod.c \
-  crypto/conf/conf_sap.c \
   crypto/cryptlib.c \
   crypto/cversion.c \
-  crypto/dso/dso_dl.c \
-  crypto/dso/dso_dlfcn.c \
-  crypto/dso/dso_lib.c \
-  crypto/dso/dso_null.c \
-  crypto/dso/dso_openssl.c \
   crypto/ebcdic.c \
   crypto/err/err.c \
-  crypto/err/err_all.c \
-  crypto/err/err_prn.c \
-  crypto/evp/bio_b64.c \
-  crypto/evp/bio_enc.c \
-  crypto/evp/bio_md.c \
-  crypto/evp/bio_ok.c \
-  crypto/evp/c_all.c \
-  crypto/evp/c_allc.c \
-  crypto/evp/c_alld.c \
   crypto/evp/digest.c \
   crypto/evp/e_aes.c \
-  crypto/evp/e_aes_cbc_hmac_sha1.c \
-  crypto/evp/e_bf.c \
-  crypto/evp/e_null.c \
-  crypto/evp/e_old.c \
-  crypto/evp/e_xcbc_d.c \
-  crypto/evp/encode.c \
-  crypto/evp/evp_acnf.c \
-  crypto/evp/evp_cnf.c \
   crypto/evp/evp_enc.c \
-  crypto/evp/evp_key.c \
   crypto/evp/evp_lib.c \
-  crypto/evp/evp_pbe.c \
-  crypto/evp/evp_pkey.c \
-  crypto/evp/m_dss.c \
-  crypto/evp/m_dss1.c \
-  crypto/evp/m_md5.c \
-  crypto/evp/m_mdc2.c \
-  crypto/evp/m_null.c \
   crypto/evp/m_sha1.c \
-  crypto/evp/m_sigver.c \
-  crypto/evp/m_wp.c \
-  crypto/evp/names.c \
-  crypto/evp/p5_crpt.c \
-  crypto/evp/p5_crpt2.c \
-  crypto/evp/p_dec.c \
-  crypto/evp/p_enc.c \
   crypto/evp/p_lib.c \
-  crypto/evp/p_open.c \
-  crypto/evp/p_seal.c \
-  crypto/evp/p_sign.c \
-  crypto/evp/p_verify.c \
-  crypto/evp/pmeth_fn.c \
-  crypto/evp/pmeth_gn.c \
   crypto/evp/pmeth_lib.c \
   crypto/ex_data.c \
-  crypto/hmac/hm_ameth.c \
-  crypto/hmac/hm_pmeth.c \
   crypto/hmac/hmac.c \
-  crypto/lhash/lh_stats.c \
   crypto/lhash/lhash.c \
-  crypto/md5/md5_dgst.c \
-  crypto/md5/md5_one.c \
   crypto/mem.c \
   crypto/mem_clr.c \
   crypto/mem_dbg.c \
   crypto/modes/cbc128.c \
-  crypto/modes/ccm128.c \
-  crypto/modes/cfb128.c \
   crypto/modes/ctr128.c \
   crypto/modes/gcm128.c \
-  crypto/modes/ofb128.c \
-  crypto/modes/xts128.c \
   crypto/o_dir.c \
   crypto/o_init.c \
   crypto/o_str.c \
   crypto/o_time.c \
-  crypto/objects/o_names.c \
   crypto/objects/obj_dat.c \
-  crypto/objects/obj_lib.c \
-  crypto/objects/obj_xref.c \
-  crypto/pem/pem_all.c \
-  crypto/pem/pem_info.c \
-  crypto/pem/pem_lib.c \
-  crypto/pem/pem_oth.c \
-  crypto/pem/pem_pk8.c \
-  crypto/pem/pem_pkey.c \
-  crypto/pem/pem_seal.c \
-  crypto/pem/pem_sign.c \
-  crypto/pem/pem_x509.c \
-  crypto/pem/pem_xaux.c \
-  crypto/pem/pvkfmt.c \
-  crypto/pkcs12/p12_add.c \
-  crypto/pkcs12/p12_asn.c \
-  crypto/pkcs12/p12_attr.c \
-  crypto/pkcs12/p12_crpt.c \
-  crypto/pkcs12/p12_crt.c \
-  crypto/pkcs12/p12_decr.c \
-  crypto/pkcs12/p12_init.c \
-  crypto/pkcs12/p12_key.c \
-  crypto/pkcs12/p12_kiss.c \
-  crypto/pkcs12/p12_mutl.c \
-  crypto/pkcs12/p12_npas.c \
-  crypto/pkcs12/p12_p8d.c \
-  crypto/pkcs12/p12_p8e.c \
-  crypto/pkcs12/p12_utl.c \
-  crypto/pkcs12/pk12err.c \
-  crypto/pkcs7/pk7_asn1.c \
-  crypto/pkcs7/pk7_attr.c \
-  crypto/pkcs7/pk7_doit.c \
-  crypto/pkcs7/pk7_lib.c \
-  crypto/pkcs7/pk7_mime.c \
-  crypto/pkcs7/pk7_smime.c \
-  crypto/pkcs7/pkcs7err.c \
-  crypto/pqueue/pqueue.c \
   crypto/rand/md_rand.c \
   crypto/rand/rand_egd.c \
   crypto/rand/rand_lib.c \
   crypto/rand/rand_unix.c \
-  crypto/rand/rand_win.c \
-  crypto/rand/randfile.c \
   crypto/sha/sha1_one.c \
   crypto/sha/sha1dgst.c \
   crypto/sha/sha_dgst.c \
   crypto/stack/stack.c \
-  crypto/txt_db/txt_db.c \
-  crypto/ui/ui_compat.c \
-  crypto/ui/ui_lib.c \
-  crypto/ui/ui_openssl.c \
-  crypto/ui/ui_util.c \
   crypto/uid.c \
-  crypto/x509/by_dir.c \
-  crypto/x509/by_file.c \
-  crypto/x509/x509_att.c \
-  crypto/x509/x509_cmp.c \
-  crypto/x509/x509_d2.c \
-  crypto/x509/x509_def.c \
-  crypto/x509/x509_ext.c \
-  crypto/x509/x509_lu.c \
-  crypto/x509/x509_obj.c \
-  crypto/x509/x509_r2x.c \
-  crypto/x509/x509_req.c \
-  crypto/x509/x509_set.c \
-  crypto/x509/x509_trs.c \
-  crypto/x509/x509_txt.c \
-  crypto/x509/x509_v3.c \
-  crypto/x509/x509_vfy.c \
-  crypto/x509/x509_vpm.c \
-  crypto/x509/x509cset.c \
-  crypto/x509/x509name.c \
-  crypto/x509/x509rset.c \
-  crypto/x509/x509spki.c \
-  crypto/x509/x509type.c \
-  crypto/x509/x_all.c \
-  crypto/x509v3/pcy_cache.c \
-  crypto/x509v3/pcy_data.c \
-  crypto/x509v3/pcy_lib.c \
-  crypto/x509v3/pcy_map.c \
-  crypto/x509v3/pcy_node.c \
-  crypto/x509v3/pcy_tree.c \
-  crypto/x509v3/v3_akey.c \
-  crypto/x509v3/v3_akeya.c \
-  crypto/x509v3/v3_alt.c \
-  crypto/x509v3/v3_bcons.c \
-  crypto/x509v3/v3_bitst.c \
-  crypto/x509v3/v3_conf.c \
-  crypto/x509v3/v3_cpols.c \
-  crypto/x509v3/v3_crld.c \
-  crypto/x509v3/v3_enum.c \
-  crypto/x509v3/v3_extku.c \
-  crypto/x509v3/v3_genn.c \
-  crypto/x509v3/v3_ia5.c \
-  crypto/x509v3/v3_info.c \
-  crypto/x509v3/v3_int.c \
-  crypto/x509v3/v3_lib.c \
-  crypto/x509v3/v3_ncons.c \
-  crypto/x509v3/v3_ocsp.c \
-  crypto/x509v3/v3_pci.c \
-  crypto/x509v3/v3_pcia.c \
-  crypto/x509v3/v3_pcons.c \
-  crypto/x509v3/v3_pku.c \
-  crypto/x509v3/v3_pmaps.c \
-  crypto/x509v3/v3_prn.c \
-  crypto/x509v3/v3_purp.c \
-  crypto/x509v3/v3_skey.c \
-  crypto/x509v3/v3_sxnet.c \
-  crypto/x509v3/v3_utl.c \
-  crypto/x509v3/v3err.c \
 
 local_c_includes += \
   $(LOCAL_PATH) \
diff --git a/build-config-32.mk b/build-config-32.mk
index bcd8236..9314959 100644
--- a/build-config-32.mk
+++ b/build-config-32.mk
@@ -74,3 +74,12 @@ openssl_cflags := \
   -DOPENSSL_NO_DEPRECATED \
   -DOPENSSL_NO_X509 \
   -DOPENSSL_NO_SOCK \
+  -DOPENSSL_NO_BN \
+  -DOPENSSL_NO_OBJECT \
+  -DOPENSSL_NO_XTS \
+  -DOPENSSL_NO_CCM \
+  -DOPENSSL_NO_OFB \
+  -DOPENSSL_NO_ECB \
+  -DOPENSSL_NO_CFB \
+  -DOPENSSL_NO_CMAC \
+  -DOPENSSL_NO_BIO2 \
diff --git a/crypto/asn1/ameth_lib.c b/crypto/asn1/ameth_lib.c
index a19e058..054ed02 100644
--- a/crypto/asn1/ameth_lib.c
+++ b/crypto/asn1/ameth_lib.c
@@ -68,8 +68,12 @@ extern const EVP_PKEY_ASN1_METHOD rsa_asn1_meths[];
 extern const EVP_PKEY_ASN1_METHOD dsa_asn1_meths[];
 extern const EVP_PKEY_ASN1_METHOD dh_asn1_meth;
 extern const EVP_PKEY_ASN1_METHOD eckey_asn1_meth;
+#ifndef OPENSSL_NO_BN
 extern const EVP_PKEY_ASN1_METHOD hmac_asn1_meth;
+#endif
+#ifndef OPENSSL_NO_CMAC
 extern const EVP_PKEY_ASN1_METHOD cmac_asn1_meth;
+#endif
 
 /* Keep this sorted in type order !! */
 static const EVP_PKEY_ASN1_METHOD *standard_methods[] = 
@@ -91,8 +95,12 @@ static const EVP_PKEY_ASN1_METHOD *standard_methods[] =
 #ifndef OPENSSL_NO_EC
 	&eckey_asn1_meth,
 #endif
+#ifndef OPENSSL_NO_BN
 	&hmac_asn1_meth,
+#endif
+#ifndef OPENSSL_NO_CMAC
 	&cmac_asn1_meth
+#endif
 	};
 
 typedef int sk_cmp_fn_type(const char * const *a, const char * const *b);
diff --git a/crypto/evp/e_aes.c b/crypto/evp/e_aes.c
index 1bfb5d9..96142aa 100644
--- a/crypto/evp/e_aes.c
+++ b/crypto/evp/e_aes.c
@@ -84,6 +84,7 @@ typedef struct
 	ctr128_f ctr;
 	} EVP_AES_GCM_CTX;
 
+#ifndef OPENSSL_NO_XTS
 typedef struct
 	{
 	AES_KEY ks1, ks2;	/* AES key schedules to use */
@@ -93,7 +94,9 @@ typedef struct
 			const AES_KEY *key1, const AES_KEY *key2,
 			const unsigned char iv[16]);
 	} EVP_AES_XTS_CTX;
+#endif
 
+#ifndef OPENSSL_NO_CCM
 typedef struct
 	{
 	AES_KEY ks;		/* AES key schedule to use */
@@ -105,6 +108,7 @@ typedef struct
 	CCM128_CONTEXT ccm;
 	ccm128_f str;
 	} EVP_AES_CCM_CTX;
+#endif
 
 #define MAXBITCHUNK	((size_t)1<<(sizeof(size_t)*8-4))
 
@@ -132,6 +136,7 @@ void bsaes_cbc_encrypt(const unsigned char *in, unsigned char *out,
 void bsaes_ctr32_encrypt_blocks(const unsigned char *in, unsigned char *out,
 			size_t len, const AES_KEY *key,
 			const unsigned char ivec[16]);
+#ifndef OPENSSL_NO_XTS
 void bsaes_xts_encrypt(const unsigned char *inp, unsigned char *out,
 			size_t len, const AES_KEY *key1,
 			const AES_KEY *key2, const unsigned char iv[16]);
@@ -139,6 +144,7 @@ void bsaes_xts_decrypt(const unsigned char *inp, unsigned char *out,
 			size_t len, const AES_KEY *key1,
 			const AES_KEY *key2, const unsigned char iv[16]);
 #endif
+#endif
 #ifdef AES_CTR_ASM
 void AES_ctr32_encrypt(const unsigned char *in, unsigned char *out,
 			size_t blocks, const AES_KEY *key,
@@ -200,6 +206,7 @@ void aesni_ctr32_encrypt_blocks(const unsigned char *in,
 			const void *key,
 			const unsigned char *ivec);
 
+#ifndef OPENSSL_NO_XTS
 void aesni_xts_encrypt(const unsigned char *in,
 			unsigned char *out,
 			size_t length,
@@ -211,7 +218,9 @@ void aesni_xts_decrypt(const unsigned char *in,
 			size_t length,
 			const AES_KEY *key1, const AES_KEY *key2,
 			const unsigned char iv[16]);
+#endif
 
+#ifndef OPENSSL_NO_CCM
 void aesni_ccm64_encrypt_blocks (const unsigned char *in,
 			unsigned char *out,
 			size_t blocks,
@@ -225,6 +234,7 @@ void aesni_ccm64_decrypt_blocks (const unsigned char *in,
 			const void *key,
 			const unsigned char ivec[16],
 			unsigned char cmac[16]);
+#endif
 
 static int aesni_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
 		   const unsigned char *iv, int enc)
@@ -270,6 +280,7 @@ static int aesni_cbc_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,
 	return 1;
 }
 
+#ifndef OPENSSL_NO_ECB
 static int aesni_ecb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,
 	const unsigned char *in, size_t len)
 {
@@ -281,6 +292,7 @@ static int aesni_ecb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,
 
 	return 1;
 }
+#endif
 
 #define aesni_ofb_cipher aes_ofb_cipher
 static int aesni_ofb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,
@@ -343,6 +355,7 @@ static int aesni_gcm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
 static int aesni_gcm_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
 		const unsigned char *in, size_t len);
 
+#ifndef OPENSSL_NO_XTS
 static int aesni_xts_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                         const unsigned char *iv, int enc)
 	{
@@ -385,7 +398,9 @@ static int aesni_xts_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
 #define aesni_xts_cipher aes_xts_cipher
 static int aesni_xts_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
 		const unsigned char *in, size_t len);
+#endif
 
+#ifndef OPENSSL_NO_CCM
 static int aesni_ccm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                         const unsigned char *iv, int enc)
 	{
@@ -412,6 +427,7 @@ static int aesni_ccm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
 #define aesni_ccm_cipher aes_ccm_cipher
 static int aesni_ccm_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
 		const unsigned char *in, size_t len);
+#endif
 
 #define BLOCK_CIPHER_generic(nid,keylen,blocksize,ivlen,nmode,mode,MODE,flags) \
 static const EVP_CIPHER aesni_##keylen##_##mode = { \
@@ -493,6 +509,14 @@ const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
 	BLOCK_CIPHER_generic(nid,keylen,1,16,cfb8,cfb8,CFB,flags)	\
 	BLOCK_CIPHER_generic(nid,keylen,1,16,ctr,ctr,CTR,flags)
 
+#define CBC_pack(nid, keylen, flags) BLOCK_CIPHER_generic(nid,keylen,16,16,cbc,cbc,CBC,flags|EVP_CIPH_FLAG_DEFAULT_ASN1)
+#define ECB_pack(nid, keylen, flags) BLOCK_CIPHER_generic(nid,keylen,16,0,ecb,ecb,ECB,flags|EVP_CIPH_FLAG_DEFAULT_ASN1)
+#define OFB_pack(nid, keylen, flags) BLOCK_CIPHER_generic(nid,keylen,1,16,ofb128,ofb,OFB,flags|EVP_CIPH_FLAG_DEFAULT_ASN1)
+#define CFB_pack(nid, keylen, flags) BLOCK_CIPHER_generic(nid,keylen,1,16,cfb128,cfb,CFB,flags|EVP_CIPH_FLAG_DEFAULT_ASN1)
+#define CFB1_pack(nid, keylen, flags) BLOCK_CIPHER_generic(nid,keylen,1,16,cfb1,cfb1,CFB,flags)
+#define CFB8_pack(nid, keylen, flags) BLOCK_CIPHER_generic(nid,keylen,1,16,cfb8,cfb8,CFB,flags)
+#define CTR_pack(nid, keylen, flags) BLOCK_CIPHER_generic(nid,keylen,1,16,ctr,ctr,CTR,flags)
+
 static int aes_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
 		   const unsigned char *iv, int enc)
 	{
@@ -586,6 +610,7 @@ static int aes_cbc_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,
 	return 1;
 }
 
+#ifndef OPENSSL_NO_ECB
 static int aes_ecb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,
 	const unsigned char *in, size_t len)
 {
@@ -600,7 +625,9 @@ static int aes_ecb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,
 
 	return 1;
 }
+#endif
 
+#ifndef OPENSSL_NO_OFB
 static int aes_ofb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,
 	const unsigned char *in,size_t len)
 {
@@ -610,7 +637,9 @@ static int aes_ofb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,
 			ctx->iv,&ctx->num,dat->block);
 	return 1;
 }
+#endif
 
+#ifndef OPENSSL_NO_CFB
 static int aes_cfb_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,
 	const unsigned char *in,size_t len)
 {
@@ -653,6 +682,7 @@ static int aes_cfb1_cipher(EVP_CIPHER_CTX *ctx,unsigned char *out,
 	
 	return 1;
 }
+#endif
 
 static int aes_ctr_cipher (EVP_CIPHER_CTX *ctx, unsigned char *out,
 		const unsigned char *in, size_t len)
@@ -670,9 +700,37 @@ static int aes_ctr_cipher (EVP_CIPHER_CTX *ctx, unsigned char *out,
 	return 1;
 }
 
-BLOCK_CIPHER_generic_pack(NID_aes,128,EVP_CIPH_FLAG_FIPS)
-BLOCK_CIPHER_generic_pack(NID_aes,192,EVP_CIPH_FLAG_FIPS)
-BLOCK_CIPHER_generic_pack(NID_aes,256,EVP_CIPH_FLAG_FIPS)
+CBC_pack(NID_aes, 128, EVP_CIPH_FLAG_FIPS)
+CBC_pack(NID_aes, 192, EVP_CIPH_FLAG_FIPS)
+CBC_pack(NID_aes, 256, EVP_CIPH_FLAG_FIPS)
+
+#ifndef OPENSSL_NO_ECB
+ECB_pack(NID_aes, 128, EVP_CIPH_FLAG_FIPS)
+ECB_pack(NID_aes, 192, EVP_CIPH_FLAG_FIPS)
+ECB_pack(NID_aes, 256, EVP_CIPH_FLAG_FIPS)
+#endif
+
+#ifndef OPENSSL_NO_OFB
+OFB_pack(NID_aes, 128, EVP_CIPH_FLAG_FIPS)
+OFB_pack(NID_aes, 192, EVP_CIPH_FLAG_FIPS)
+OFB_pack(NID_aes, 256, EVP_CIPH_FLAG_FIPS)
+#endif
+
+#ifndef OPENSSL_NO_CFB
+CFB_pack(NID_aes, 128, EVP_CIPH_FLAG_FIPS)
+CFB_pack(NID_aes, 192, EVP_CIPH_FLAG_FIPS)
+CFB_pack(NID_aes, 256, EVP_CIPH_FLAG_FIPS)
+CFB1_pack(NID_aes, 128, EVP_CIPH_FLAG_FIPS)
+CFB1_pack(NID_aes, 192, EVP_CIPH_FLAG_FIPS)
+CFB1_pack(NID_aes, 256, EVP_CIPH_FLAG_FIPS)
+CFB8_pack(NID_aes, 128, EVP_CIPH_FLAG_FIPS)
+CFB8_pack(NID_aes, 192, EVP_CIPH_FLAG_FIPS)
+CFB8_pack(NID_aes, 256, EVP_CIPH_FLAG_FIPS)
+#endif
+
+CTR_pack(NID_aes, 128, EVP_CIPH_FLAG_FIPS)
+CTR_pack(NID_aes, 192, EVP_CIPH_FLAG_FIPS)
+CTR_pack(NID_aes, 256, EVP_CIPH_FLAG_FIPS)
 
 static int aes_gcm_cleanup(EVP_CIPHER_CTX *c)
 	{
@@ -1038,6 +1096,7 @@ BLOCK_CIPHER_custom(NID_aes,192,1,12,gcm,GCM,
 BLOCK_CIPHER_custom(NID_aes,256,1,12,gcm,GCM,
 		EVP_CIPH_FLAG_FIPS|EVP_CIPH_FLAG_AEAD_CIPHER|CUSTOM_FLAGS)
 
+#ifndef OPENSSL_NO_XTS
 static int aes_xts_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
 	{
 	EVP_AES_XTS_CTX *xctx = c->cipher_data;
@@ -1117,7 +1176,9 @@ static int aes_xts_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
 
 	return 1;
 	}
+#endif
 
+#ifndef OPENSSL_NO_XTS
 static int aes_xts_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
 		const unsigned char *in, size_t len)
 	{
@@ -1151,7 +1212,9 @@ static int aes_xts_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
 
 BLOCK_CIPHER_custom(NID_aes,128,1,16,xts,XTS,EVP_CIPH_FLAG_FIPS|XTS_FLAGS)
 BLOCK_CIPHER_custom(NID_aes,256,1,16,xts,XTS,EVP_CIPH_FLAG_FIPS|XTS_FLAGS)
+#endif
 
+#ifndef OPENSSL_NO_CCM
 static int aes_ccm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
 	{
 	EVP_AES_CCM_CTX *cctx = c->cipher_data;
@@ -1312,3 +1375,4 @@ BLOCK_CIPHER_custom(NID_aes,256,1,12,ccm,CCM,EVP_CIPH_FLAG_FIPS|CUSTOM_FLAGS)
 
 #endif
 #endif
+#endif
diff --git a/crypto/evp/evp_lib.c b/crypto/evp/evp_lib.c
index b180e48..deebace 100644
--- a/crypto/evp/evp_lib.c
+++ b/crypto/evp/evp_lib.c
@@ -61,6 +61,7 @@
 #include <openssl/evp.h>
 #include <openssl/objects.h>
 
+#ifndef OPENSSL_NO_BN
 int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
 	{
 	int ret;
@@ -177,6 +178,7 @@ int EVP_CIPHER_type(const EVP_CIPHER *ctx)
 		return nid;
 	}
 }
+#endif
 
 int EVP_CIPHER_block_size(const EVP_CIPHER *e)
 	{
diff --git a/crypto/evp/p_lib.c b/crypto/evp/p_lib.c
index bd1977d..d10a97d 100644
--- a/crypto/evp/p_lib.c
+++ b/crypto/evp/p_lib.c
@@ -63,7 +63,9 @@
 #include <openssl/objects.h>
 #include <openssl/evp.h>
 #include <openssl/asn1_mac.h>
+#ifndef OPENSSL_NO_X509
 #include <openssl/x509.h>
+#endif
 #ifndef OPENSSL_NO_RSA
 #include <openssl/rsa.h>
 #endif
@@ -409,8 +411,10 @@ void EVP_PKEY_free(EVP_PKEY *x)
 		}
 #endif
 	EVP_PKEY_free_it(x);
+#ifndef OPENSSL_NO_X509
 	if (x->attributes)
 		sk_X509_ATTRIBUTE_pop_free(x->attributes, X509_ATTRIBUTE_free);
+#endif
 	OPENSSL_free(x);
 	}
 
diff --git a/crypto/evp/pmeth_lib.c b/crypto/evp/pmeth_lib.c
index acfa7b6..9a2575a 100644
--- a/crypto/evp/pmeth_lib.c
+++ b/crypto/evp/pmeth_lib.c
@@ -89,8 +89,12 @@ static const EVP_PKEY_METHOD *standard_methods[] =
 #ifndef OPENSSL_NO_EC
 	&ec_pkey_meth,
 #endif
+#ifndef OPENSSL_NO_BN
 	&hmac_pkey_meth,
+#endif
+#ifndef OPENSSL_NO_CMAC
 	&cmac_pkey_meth
+#endif
 	};
 
 DECLARE_OBJ_BSEARCH_CMP_FN(const EVP_PKEY_METHOD *, const EVP_PKEY_METHOD *,
@@ -414,6 +418,7 @@ int EVP_PKEY_CTX_ctrl(EVP_PKEY_CTX *ctx, int keytype, int optype,
 
 	}
 
+#ifndef OPENSSL_NO_BN
 int EVP_PKEY_CTX_ctrl_str(EVP_PKEY_CTX *ctx,
 					const char *name, const char *value)
 	{
@@ -436,6 +441,7 @@ int EVP_PKEY_CTX_ctrl_str(EVP_PKEY_CTX *ctx,
 		}
 	return ctx->pmeth->ctrl_str(ctx, name, value);
 	}
+#endif
 
 int EVP_PKEY_CTX_get_operation(EVP_PKEY_CTX *ctx)
 	{
diff --git a/crypto/mem_dbg.c b/crypto/mem_dbg.c
index ac79339..b645b96 100644
--- a/crypto/mem_dbg.c
+++ b/crypto/mem_dbg.c
@@ -822,6 +822,7 @@ void CRYPTO_mem_leaks(BIO *b)
 	MemCheck_on(); /* release MALLOC2 lock */
 	}
 
+#ifndef OPENSSL_NO_BIO2
 #ifndef OPENSSL_NO_FP_API
 void CRYPTO_mem_leaks_fp(FILE *fp)
 	{
@@ -840,6 +841,7 @@ void CRYPTO_mem_leaks_fp(FILE *fp)
 	BIO_free(b);
 	}
 #endif
+#endif
 
 
 
diff --git a/crypto/objects/obj_dat.c b/crypto/objects/obj_dat.c
index 8a342ba..18a43a1 100644
--- a/crypto/objects/obj_dat.c
+++ b/crypto/objects/obj_dat.c
@@ -63,7 +63,9 @@
 #include <openssl/lhash.h>
 #include <openssl/asn1.h>
 #include <openssl/objects.h>
+#ifndef OPENSSL_NO_BN
 #include <openssl/bn.h>
+#endif
 
 /* obj_dat.h is generated from objects.h by obj_dat.pl */
 #ifndef OPENSSL_NO_OBJECT
@@ -195,16 +197,20 @@ static void cleanup1_doall(ADDED_OBJ *a)
 static void cleanup2_doall(ADDED_OBJ *a)
 	{ a->obj->nid++; }
 
+#ifndef OPENSSL_NO_BN
 static void cleanup3_doall(ADDED_OBJ *a)
 	{
 	if (--a->obj->nid == 0)
 		ASN1_OBJECT_free(a->obj);
 	OPENSSL_free(a);
 	}
+#endif
 
 static IMPLEMENT_LHASH_DOALL_FN(cleanup1, ADDED_OBJ)
 static IMPLEMENT_LHASH_DOALL_FN(cleanup2, ADDED_OBJ)
+#ifndef OPENSSL_NO_BN
 static IMPLEMENT_LHASH_DOALL_FN(cleanup3, ADDED_OBJ)
+#endif
 
 /* The purpose of obj_cleanup_defer is to avoid EVP_cleanup() attempting
  * to use freed up OIDs. If neccessary the actual freeing up of OIDs is
@@ -219,6 +225,7 @@ void check_defer(int nid)
 			obj_cleanup_defer = 1;
 	}
 
+#ifndef OPENSSL_NO_BN
 void OBJ_cleanup(void)
 	{
 	if (obj_cleanup_defer)
@@ -285,6 +292,7 @@ err:
 	if (o != NULL) OPENSSL_free(o);
 	return(NID_undef);
 	}
+#endif
 
 ASN1_OBJECT *OBJ_nid2obj(int n)
 	{
@@ -424,6 +432,7 @@ int OBJ_obj2nid(const ASN1_OBJECT *a)
  * it can be used with any objects, not just registered ones.
  */
 
+#ifndef OPENSSL_NO_BN
 ASN1_OBJECT *OBJ_txt2obj(const char *s, int no_name)
 	{
 	int nid = NID_undef;
@@ -634,6 +643,7 @@ int OBJ_txt2nid(const char *s)
 	ASN1_OBJECT_free(obj);
 	return nid;
 }
+#endif
 
 int OBJ_ln2nid(const char *s)
 	{
@@ -732,6 +742,7 @@ const void *OBJ_bsearch_ex_(const void *key, const void *base_, int num,
 	return(p);
 	}
 
+#ifndef OPENSSL_NO_BN
 int OBJ_create_objects(BIO *in)
 	{
 	MS_STATIC char buf[512];
@@ -807,4 +818,5 @@ err:
 	OPENSSL_free(buf);
 	return(ok);
 	}
+#endif
 
-- 
1.7.12.4 (Apple Git-37)

